# docker-compose.yml
version: '3.8'

services:
  app:
    build:
      context: .
      target: development
    container_name: spring-app-dev
    ports:
      - "8080:8080"
      - "5005:5005"  # Для дебага
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres
      - JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -Xmx1g -Xms512m
    volumes:
      - .:/app
      - maven-repo:/home/spring/.m2
    networks:
      - app-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: postgres-dev
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--encoding=UTF8
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser -d myapp"]
      interval: 10s
      timeout: 5s
      retries: 5


  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-dev
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@dev.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - app-network


volumes:
  postgres-data:
  redis-data:
  maven-repo:

networks:
  app-network:
    driver: bridge